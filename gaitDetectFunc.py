import time
import numpy as np

timeArray = [0.08095312119,0.004999637604,0.07785534859,0.006995439529,0.02897810936,0.05098366737,0.02849197388,0.0541369915,0.03098607063,0.05005908012,0.03197741508,0.05002999306,0.03348469734,0.04996466637,0.03309321404,0.05100440979,0.03296160698,0.04979586601,0.03297734261,0.04984951019,0.03332710266,0.04983568192,0.03398776054,0.05009531975,0.03309416771,0.04918122292,0.00399684906,0.08145999908,0.005995035172,0.07599067688,0.002997875214,0.03137373924,0.05010938644,0.03147101402,0.05443406105,0.0319955349,0.04851055145,0.03199195862,0.05416750908,0.03097820282,0.04805254936,0.03501367569,0.04992413521,0.03308939934,0.0499587059,0.03405356407,0.04927539825,0.03397870064,0.04802584648,0.03399181366,0.05086421967,0.03197526932,0.05016970634,0.002997398376,0.08020019531,0.002998113632,0.0814845562,0.004996538162,0.03102898598,0.05098438263,0.0319788456,0.04806613922,0.03202223778,0.0539932251,0.04596424103,0.03505802155,0.03197216988,0.05303502083,0.03099441528,0.04891467094,0.03305506706,0.050801754,0.03227949142,0.05005478859,0.03380203247,0.05117702484,0.03300118446,0.04999828339,0.03197646141,0.05019235611,0.03297638893,0.05068850517,0.001998901367,0.08234333992,0.004995107651,0.07904148102,0.004996061325,0.0299949646,0.04808020592,0.03197836876,0.05107951164,0.0320148468,0.05166721344,0.03120541573,0.05172514915,0.03223800659,0.04996609688,0.03297948837,0.04998040199,0.03499746323,0.04998874664,0.03397655487,0.04903197289,0.03398036957,0.04988288879,0.0329978466,0.04898047447,0.03299999237,0.05001664162,0.002998113632,0.08001089096,0.002996683121,0.08193349838,0.005994319916,0.02698040009,0.05301380157,0.03097629547,0.05287075043,0.03013491631,0.05301880836,0.03100395203,0.04905557632,0.03400206566,0.04992198944,0.03301620483,0.04998111725,0.0339782238,0.04996323586,0.03197574615,0.05008864403,0.03343820572,0.05100059509,0.03299927711,0.05116295815,0.03199672699,0.04998373985,0.005995750427,0.07803750038,0.004996299744,0.07636332512,0.002997398376,0.03163051605,0.05300617218,0.02897572517,0.0540471077,0.03224802017,0.05104589462,0.0307033062,0.04998850822,0.03201556206,0.05038928986,0.03360438347,0.04998874664,0.03300738335,0.05097913742,0.0322060585,0.0499484539,0.03399419785,0.04954266548,0.03374052048,0.05098724365,0.03398919106,0.04798293114,0.002995491028,0.08028173447,0.002997398376,0.08073210716,0.002997636795,0.08004641533,0.004996538162,0.0299706459,0.05007147789,0.03195023537,0.05114841461,0.03198957443,0.05100154877,0.03200006485,0.05002784729,0.03311371803,0.05093598366,0.03303694725,0.0499830246,0.03302073479,0.05007076263,0.03299021721,0.05075788498,0.03298640251,0.05099272728,0.03397512436,0.04806256294,0.03390550613,0.0500690937,0.001998901367,0.08198022842,0.005995512009,0.07623720169,0.002996683121,0.03188443184,0.04999113083,0.03190398216,0.05201530457,0.03200507164,0.05126023293,0.03197717667,0.04899501801,0.03374004364,0.05099081993,0.03400945663,0.05001521111,0.03309965134,0.04809403419,0.03484892845,0.0485188961,0.03397536278,0.04998040199,0.03282785416,0.05005908012,0.03359460831,0.04961037636,0.002997398376,0.08087015152,0.002997875214,0.08111047745,0.00599527359,0.03000664711,0.05000376701,0.03105425835,0.05395126343,0.02897882462,0.05448293686,0.02797818184,0.0516500473,0.03300523758,0.04967689514,0.03319907188,0.04998207092,0.03380274773,0.04998850822,0.03297472,0.05009269714,0.03400111198,0.04809236526,0.03386688232,0.05088591576,0.03197479248,0.0501563549,0.002997159958,0.08016419411,0.002998113632,0.08092188835,0.001998901367,0.08107233047,0.003013134003,0.03198385239,0.05001544952,0.03163433075,0.05085706711,0.03199028969,0.05402183533,0.03097629547,0.04898643494,0.03344559669,0.05050754547,0.03197598457,0.05007243156,0.03497743607,0.04907345772,0.03298354149,0.0499625206,0.03298854828,0.04993247986,0.03389263153,0.05003118515,0.03354692459,0.05096364021,0.004997253418,0.0769443512,0.003997564316,0.07975172997,0.002996921539,0.03202986717,0.04996466637,0.0319943428,0.05136942863,0.03198933601,0.05109143257,0.03199481964,0.05099868774,0.03297805786,0.04999184608,0.03201460838,0.05155706406,0.03308701515,0.04995584488,0.03199028969,0.05000019073,0.03404855728,0.05003261566,0.03302121162,0.05011439323,0.03308367729,0.05000543594,0.003996610641,0.07960581779,0.002997875214,0.07952880859,0.002997159958,0.03200984001,0.05501937866,0.02899575233,0.05188155174,0.03004074097,0.05087089539,0.03219604492,0.05200386047,0.03099751472,0.05001449585,0.03402757645,0.04955410957,0.03397631645,0.0502743721,0.03399014473,0.05003929138,0.03200292587,0.05000400543,0.03341817856,0.05002903938,0.03322148323,0.05006051064,0.03282976151,0.0500330925,0.002997875214,0.0810444355,0.002996206284,0.08023118973,0.002997875214,0.03182864189,0.04935050011,0.03297734261,0.05116462708,0.03102302551,0.05397844315,0.03115463257,0.04932308197,0.03399395943,0.04870700836,0.03297638893,0.05003428459,0.03320646286,0.05180740356,0.03300189972,0.04904484749,0.03299069405,0.05001425743,0.03324794769,0.04974961281,0.002996921539,0.0802128315,0.002997636795,0.08229374886,0.004997014999,0.07784223557,0.004996538162,0.02997565269,0.04803514481,0.03186941147,0.05106425285,0.03305339813,0.05398058891,0.03097724915,0.0499150753,0.03297972679,0.04898023605,0.03299069405,0.0501947403,0.03333497047,0.05003428459,0.03285169601,0.05204701424,0.0330312252,0.04970955849,0.0339744091,0.05015325546,0.03184771538,0.05102682114,0.004996776581,0.0785779953,0.004996538162]
inputGyZHeel = [-46,-45,-47,-45,-45,-45,-45,-44,-45,-45,-43,-43,-45,-44,-45,-45,-43,-44,-45,-44,-44,-44,-44,-45,-43,-45,-44,-44,-42,-44,-44,-44,-45,-45,-45,-45,-44,-43,-45,-45,-45,-42,-44,-43,-44,-43,-44,-41,-41,-40,-38,-33,-33,-31,-38,-37,-37,-35,-33,-38,-39,-48,-71,-169,-431,-971,-738,-520,473,931,1186,1020,1380,1962,1419,940,263,-912,-1760,-2171,-1544,-487,-203,-130,-120,-109,-88,-81,-119,-155,-199,-272,-524,-860,-1214,-2374,-3305,-4568,-5116,-3930,-1431,1380,3017,4132,4202,4212,3882,3762,3678,2357,-633,-2034,-2918,-1642,-571,-187,-120,-168,-138,-143,-196,-254,-405,-615,-984,-1607,-2389,-3497,-6595,-5868,-3724,1629,2652,4193,4497,4306,3790,3650,3905,1754,-211,-1682,-2717,-1256,-306,-85,-103,-122,-84,-120,-201,-336,-496,-753,-1433,-1849,-2507,-5243,-6503,-5549,772,2486,3166,4512,4433,4366,3687,3656,3743,1068,-619,-4510,-2095,-464,-110,-114,-140,-104,-112,-153,-190,-281,-423,-703,-1346,-1818,-2576,-4704,-5842,-5232,-1671,2736,3009,4913,4452,4337,3814,3098,3970,1950,-187,-1489,-3120,-2642,-254,-111,-92,-114,-103,-180,-268,-360,-444,-773,-1198,-1702,-2701,-4214,-6089,-5521,-3403,2326,3511,5071,5434,4719,4232,3674,3429,1555,-750,-3977,-1998,-1352,-229,-154,-165,-155,-142,-178,-189,-218,-283,-494,-710,-1055,-1898,-2722,-4255,-6414,-5203,-1911,2116,3011,4524,4321,4174,3733,2781,3852,1972,-230,-1481,-2387,-1810,-679,-311,-206,-196,-90,-66,-65,-134,-190,-263,-377,-418,-444,-751,-1310,-1885,-2821,-3425,-3042,-416,1219,2088,2985,3280,2789,1473,-77,-1313,-320,-114,-41,-133,-120,-125,-61,-38,-46,-37,-41,-48,-46,-44,-40,-36,-43,-44,-47,-49,-49,-53,-50,-49,-49,-47,-49,-46,-40,-39,-39,-44,-42,-45,-47,-43,-48,-48,-50,-50,-51,-52,-52,-56,-51,-52,-54,-47,-48,-48,-49,-49,-51,-48,-48,-49,-47,-48,-47,-50,-50,-49,-46,-47,-47,-48,-50,-51,-50,-48,-50,-50,-51,-50,-49,-47,-48,-48,-44,-44,-47,-46,-49,-49,-47,-49,-47,-48,-48,-50,-45,-47,-49,-51,-49]
inputGyZShank = [1,-1,-1,1,0,-2,1,-1,1,-2,1,1,2,2,1,7,5,4,1,-1,-3,1,1,3,1,-1,2,3,2,1,2,3,3,3,5,1,3,-2,2,-1,1,3,1,1,0,1,-1,-2,-4,-4,-6,-2,-10,-19,-20,-12,6,2,18,-13,-34,-67,-174,-318,-723,-1091,-1331,-1228,-650,836,1540,1890,2030,2039,1909,1675,1054,-196,-965,-1407,-695,-1220,-960,-402,-666,-493,-416,-426,-337,-391,-484,-636,-867,-1068,-1252,-1320,-1377,-1619,-1945,-2307,-2065,-1295,803,1689,2851,3414,4076,4481,4221,3097,1249,-1106,-1964,-1261,-1440,-1051,-525,-735,-608,-505,-589,-573,-766,-910,-1060,-1284,-1498,-1756,-1998,-2232,-2133,-1499,382,1556,2402,3340,3874,4373,4523,3847,1565,-695,-1904,-2012,-2072,-1041,-573,-707,-428,-485,-525,-691,-931,-1067,-1178,-1402,-1503,-1889,-2035,-2018,-2025,-1292,1114,1941,2898,3656,4156,4408,4157,3428,432,-1269,-1557,-2384,-1739,-914,-828,-643,-526,-589,-532,-578,-660,-852,-1132,-1475,-1601,-1941,-1816,-1792,-1973,-926,691,1549,2302,3420,4138,4341,4243,3750,1026,-1467,-2369,-1237,-1523,-1329,-540,-736,-504,-481,-537,-634,-777,-990,-1077,-1314,-1442,-1656,-2017,-1989,-2155,-1132,-440,1797,2558,3773,4410,4685,4760,4155,491,-1396,-2092,-2102,-1543,-901,-767,-806,-428,-540,-468,-490,-590,-767,-909,-1173,-1374,-1517,-1793,-1981,-2300,-2012,-1247,555,1632,2807,3317,3922,4444,4519,3591,2049,-703,-2021,-558,-1890,-1156,-711,-763,-544,-466,-417,-343,-362,-391,-606,-766,-855,-851,-885,-1029,-1190,-1431,-1473,-1508,-785,849,1889,2759,2523,1795,1729,1087,133,616,249,71,16,-102,-125,-84,-22,-27,-55,-56,-54,-43,-15,18,19,10,5,6,5,14,17,20,19,16,6,5,13,11,8,-3,-7,3,8,15,11,6,-2,-8,3,8,13,15,18,17,19,17,23,23,20,13,9,6,7,10,12,14,8,5,-4,-3,3,4,0,-5,-9,-8,-5,2,1,-2,0,1,4,2,7,3,4,4,2,0,1,0,-1,2,2,7,1,3,1,2,2,-1,-8]


class gaitDetect:
    def __init__(self):       
        self.firstVar = 0
        self.movingArrShank = [0]
        self.movingArrHeel = [0]
        self.significance = 0
        self.movingAvgAccuracy = 2
        self.movingAvgShank = 0
        self.movingAvgHeel = 0
        self.lastAvgShank = 0
        self.timeLastHeelStrike = 0
        self.timeLastHeelOff = 0
        self.timeLastToeOff = 0
        self.gaitStage = 0 #0-Stance / 1-Heel Off / 2-Toe Off
        self.eventTimer = .1
        self.standing = False
        self.standingLimit = 200 * .07
        self.concurrentZeroes = 0
        self.concurrentZeroesLimit = 5
        self.lastDiffHeel = 0
        
                
    def testVal(self, shank, heel):
        self.movingArrShank.append(shank)
        self.movingArrHeel.append(heel)
        
        if len(self.movingArrShank) > self.movingAvgAccuracy:
            self.movingArrShank.pop(0)
        self.movingAvgShank = np.mean(self.movingArrShank)
        
        if len(self.movingArrHeel) > self.movingAvgAccuracy:
            self.movingArrHeel.pop(0)
        self.movingAvgHeel = np.mean(self.movingArrHeel)
        
        if self.standing == True:
            self.gaitStage = 0
            if self.movingAvgShank < - self.standingLimit or self.movingAvgShank > self.standingLimit:
                self.standing = False
                self.lastAvgShank = - self.movingAvgShank
                
        if self.standing == False:
            if self.movingAvgShank < self.standingLimit and self.movingAvgShank > - self.standingLimit:
                self.concurrentZeroes += 1
            else:
                self.concurrentZeroes = 0
                
            if self.concurrentZeroes > self.concurrentZeroesLimit:
                self.standing = True
        
        if self.significance == 0 and not self.standing:
            if self.movingAvgShank > 0 and self.lastAvgShank < 0 and self.gaitStage == 1: #detects negative to positive, aka toe off or start of swing phase
                self.significance = 1
                self.timeLastToeOff = time.time()
                self.gaitStage = 2
            elif self.movingAvgShank < 0 and self.lastAvgShank > 0 and self.gaitStage == 2: #detects positive to negative, aka heel strike or start of stance phase
                self.significance = -1
                self.timeLastHeelStrike = time.time()
                self.gaitStage = 0
            elif np.mean(np.diff(self.movingArrHeel)) < -20 and self.gaitStage == 0:
                if self.lastDiffHeel <= 20 and self.lastDiffHeel >= -20:
                    self.timeLastHeelOff = time.time()
                    self.significance = 2
                    self.gaitStage = 1

            self.lastDiffHeel = np.mean(np.diff(self.movingArrHeel))
                
        elif self.significance != 0:
            if time.time() - self.timeLastHeelStrike > self.eventTimer and time.time() - self.timeLastToeOff > self.eventTimer:
                self.significance = 0
            if self.significance == 2 and time.time() - self.timeLast:
                self.significance = 0
        
        #Implement other leg IMU - other leg heel strike must occur before measured leg toe off. (and vice versa)

        self.lastAvgShank = self.movingAvgShank
        
if __name__ == "__main__":
    rightLegGait = gaitDetect()
    gaitStages = []
    
    for enum, x in enumerate(inputGyZShank):
        rightLegGait.testVal(x * .07, inputGyZHeel[enum] * .07)
        gaitStages.append(rightLegGait.gaitStage)
        print(f"{rightLegGait.gaitStage} {rightLegGait.significance} {rightLegGait.standing}")
        time.sleep(timeArray[enum])
        
    print(gaitStages)
